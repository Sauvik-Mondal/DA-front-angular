{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let CommonService = /*#__PURE__*/(() => {\n  class CommonService {\n    constructor() {\n      this.user = {\n        email: '',\n        userId: '',\n        expiresIn: '',\n        authId: '',\n        authenticated: '',\n        isCoach: ''\n      };\n    }\n\n    logOut() {\n      localStorage.clear();\n      clearTimeout(this.mainTimer);\n      this.user.email = null;\n      this.user.userId = null;\n      this.user.expiresIn = null;\n      this.user.authId = null;\n      this.user.authenticated = null;\n      this.user.isCoach = null;\n    }\n\n    setUser(payload) {\n      this.user.email = payload.email;\n      this.user.userId = payload.userId;\n      this.user.expiresIn = payload.expiresIn;\n      this.user.authId = payload.authId;\n      this.user.authenticated = payload.isCoach;\n    }\n\n    setMainTimer(time) {\n      this.mainTimer = setTimeout(() => {\n        this.logOut();\n      }, +time * 1000);\n    }\n\n    autoLogin() {\n      const cached_localId = localStorage.getItem('localId');\n      const cached_expiresIn = +localStorage.getItem('expiresIn') - new Date().getTime() / 1000;\n      const cached_idToken = localStorage.getItem('idToken');\n      const cached_authenticated = localStorage.getItem('authenticated');\n      const cached_email = localStorage.getItem('email');\n      const cached_isCoach = localStorage.getItem('isCoach');\n      this.mainTimer = setTimeout(() => {\n        this.logOut();\n      }, +cached_expiresIn * 1000);\n\n      if (cached_localId && cached_expiresIn && cached_idToken && cached_authenticated) {\n        this.user.userId = cached_localId;\n        this.user.expiresIn = cached_expiresIn;\n        this.user.authId = cached_idToken;\n        this.user.authenticated = cached_authenticated;\n        this.user.email = cached_email;\n        this.user.isCoach = cached_isCoach;\n      }\n    }\n\n    getUserId() {\n      return this.user.userId;\n    }\n\n  }\n\n  CommonService.ɵfac = function CommonService_Factory(t) {\n    return new (t || CommonService)();\n  };\n\n  CommonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CommonService,\n    factory: CommonService.ɵfac,\n    providedIn: 'root'\n  });\n  return CommonService;\n})();","map":null,"metadata":{},"sourceType":"module"}